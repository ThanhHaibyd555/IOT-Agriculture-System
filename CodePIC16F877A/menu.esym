D G "__PCM__" 0 0 ""5.112""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""10-Jun-23""
D G "__TIME__" 0 0 ""22:28:24""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
F N "set_tris_a" 2 39 ""
V L "value" 2 39 "int8" `55 
F B "set_tris_a" 2 39 "void(int8 value)" `54 
F N "set_tris_b" 2 40 ""
V L "value" 2 40 "int8" `57 
F B "set_tris_b" 2 40 "void(int8 value)" `56 
F N "set_tris_c" 2 41 ""
V L "value" 2 41 "int8" `59 
F B "set_tris_c" 2 41 "void(int8 value)" `58 
F N "set_tris_d" 2 42 ""
V L "value" 2 42 "int8" `61 
F B "set_tris_d" 2 42 "void(int8 value)" `60 
F N "set_tris_e" 2 43 ""
V L "value" 2 43 "int8" `63 
F B "set_tris_e" 2 43 "void(int8 value)" `62 
F N "get_tris_a" 2 44 ""
F B "get_tris_a" 2 44 "int8()" `64 
F N "get_tris_b" 2 45 ""
F B "get_tris_b" 2 45 "int8()" `65 
F N "get_tris_c" 2 46 ""
F B "get_tris_c" 2 46 "int8()" `66 
F N "get_tris_d" 2 47 ""
F B "get_tris_d" 2 47 "int8()" `67 
F N "get_tris_e" 2 48 ""
F B "get_tris_e" 2 48 "int8()" `68 
F N "output_a" 2 49 ""
V L "value" 2 49 "int8" `70 
F B "output_a" 2 49 "void(int8 value)" `69 
F N "output_b" 2 50 ""
V L "value" 2 50 "int8" `72 
F B "output_b" 2 50 "void(int8 value)" `71 
F N "output_c" 2 51 ""
V L "value" 2 51 "int8" `74 
F B "output_c" 2 51 "void(int8 value)" `73 
F N "output_d" 2 52 ""
V L "value" 2 52 "int8" `76 
F B "output_d" 2 52 "void(int8 value)" `75 
F N "output_e" 2 53 ""
V L "value" 2 53 "int8" `78 
F B "output_e" 2 53 "void(int8 value)" `77 
F N "input_a" 2 54 ""
F B "input_a" 2 54 "int8()" `79 
F N "input_b" 2 55 ""
F B "input_b" 2 55 "int8()" `80 
F N "input_c" 2 56 ""
F B "input_c" 2 56 "int8()" `81 
F N "input_d" 2 57 ""
F B "input_d" 2 57 "int8()" `82 
F N "input_e" 2 58 ""
F B "input_e" 2 58 "int8()" `83 
F N "input_change_a" 2 59 ""
F B "input_change_a" 2 59 "int8()" `84 
F N "input_change_b" 2 60 ""
F B "input_change_b" 2 60 "int8()" `85 
F N "input_change_c" 2 61 ""
F B "input_change_c" 2 61 "int8()" `86 
F N "input_change_d" 2 62 ""
F B "input_change_d" 2 62 "int8()" `87 
F N "input_change_e" 2 63 ""
F B "input_change_e" 2 63 "int8()" `88 
F N "port_b_pullups" 2 64 ""
V L "upmask" 2 64 "int8" `90 
F B "port_b_pullups" 2 64 "void(int8 upmask)" `89 
F N "input" 2 65 ""
V L "pin" 2 65 "int16" `92 
F B "input" 2 65 "int8(int16 pin)" `91 
F N "input_state" 2 66 ""
V L "pin" 2 66 "int16" `94 
F B "input_state" 2 66 "int8(int16 pin)" `93 
F N "output_low" 2 67 ""
V L "pin" 2 67 "int16" `96 
F B "output_low" 2 67 "void(int16 pin)" `95 
F N "output_high" 2 68 ""
V L "pin" 2 68 "int16" `98 
F B "output_high" 2 68 "void(int16 pin)" `97 
F N "output_toggle" 2 69 ""
V L "pin" 2 69 "int16" `100 
F B "output_toggle" 2 69 "void(int16 pin)" `99 
F N "output_bit" 2 70 ""
V L "pin" 2 70 "int16" `102 
V L "level" 2 70 "int8" `103 
F B "output_bit" 2 70 "void(int16 pin,int8 level)" `101 
F N "output_float" 2 71 ""
V L "pin" 2 71 "int16" `105 
F B "output_float" 2 71 "void(int16 pin)" `104 
F N "output_drive" 2 72 ""
V L "pin" 2 72 "int16" `107 
F B "output_drive" 2 72 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
D G "PIN_A0" 2 76 "40"
D G "PIN_A1" 2 77 "41"
D G "PIN_A2" 2 78 "42"
D G "PIN_A3" 2 79 "43"
D G "PIN_A4" 2 80 "44"
D G "PIN_A5" 2 81 "45"
D G "PIN_A6" 2 82 "46"
D G "PIN_A7" 2 83 "47"
D G "PIN_B0" 2 85 "48"
D G "PIN_B1" 2 86 "49"
D G "PIN_B2" 2 87 "50"
D G "PIN_B3" 2 88 "51"
D G "PIN_B4" 2 89 "52"
D G "PIN_B5" 2 90 "53"
D G "PIN_B6" 2 91 "54"
D G "PIN_B7" 2 92 "55"
D G "PIN_C0" 2 94 "56"
D G "PIN_C1" 2 95 "57"
D G "PIN_C2" 2 96 "58"
D G "PIN_C3" 2 97 "59"
D G "PIN_C4" 2 98 "60"
D G "PIN_C5" 2 99 "61"
D G "PIN_C6" 2 100 "62"
D G "PIN_C7" 2 101 "63"
D G "PIN_D0" 2 103 "64"
D G "PIN_D1" 2 104 "65"
D G "PIN_D2" 2 105 "66"
D G "PIN_D3" 2 106 "67"
D G "PIN_D4" 2 107 "68"
D G "PIN_D5" 2 108 "69"
D G "PIN_D6" 2 109 "70"
D G "PIN_D7" 2 110 "71"
D G "PIN_E0" 2 112 "72"
D G "PIN_E1" 2 113 "73"
D G "PIN_E2" 2 114 "74"
D G "PIN_E3" 2 115 "75"
D G "FALSE" 2 118 "0"
D G "TRUE" 2 119 "1"
D G "BYTE" 2 121 "int8"
D G "BOOLEAN" 2 122 "int1"
D G "getc" 2 124 "getch"
D G "fgetc" 2 125 "getch"
D G "getchar" 2 126 "getch"
D G "putc" 2 127 "putchar"
D G "fputc" 2 128 "putchar"
D G "fgets" 2 129 "gets"
D G "fputs" 2 130 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
F N "restart_cause" 2 135 ""
F B "restart_cause" 2 135 "int8()" `108 
F N "reset_cpu" 2 136 ""
F B "reset_cpu" 2 136 "void()" `109 
F N "sleep" 2 137 ""
F B "sleep" 2 137 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_FROM_SLEEP" 2 139 "3"
D G "WDT_TIMEOUT" 2 140 "11"
D G "MCLR_FROM_SLEEP" 2 141 "19"
D G "MCLR_FROM_RUN" 2 142 "27"
D G "NORMAL_POWER_UP" 2 143 "25"
D G "BROWNOUT_RESTART" 2 144 "26"
c L "sleep" 2 3 5 "FUNCTION"
F N "setup_timer_0" 2 151 ""
V L "mode" 2 151 "int8" `112 
F B "setup_timer_0" 2 151 "void(int8 mode)" `111 
F N "set_timer0" 2 152 ""
V L "value" 2 152 "int8" `114 
F B "set_timer0" 2 152 "void(int8 value)" `113 
F N "get_timer0" 2 153 ""
F B "get_timer0" 2 153 "int8()" `115 
F N "setup_counters" 2 154 ""
V L "mode" 2 154 "int8" `117 
V L "prescaler" 2 154 "int8" `118 
F B "setup_counters" 2 154 "void(int8 mode,int8 prescaler)" `116 
F N "set_rtcc" 2 155 ""
V L "value" 2 155 "int8" `120 
F B "set_rtcc" 2 155 "void(int8 value)" `119 
F N "get_rtcc" 2 156 ""
F B "get_rtcc" 2 156 "int8()" `121  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 2 158 "0"
D G "T0_EXT_L_TO_H" 2 159 "32"
D G "T0_EXT_H_TO_L" 2 160 "48"
D G "T0_DIV_1" 2 162 "8"
D G "T0_DIV_2" 2 163 "0"
D G "T0_DIV_4" 2 164 "1"
D G "T0_DIV_8" 2 165 "2"
D G "T0_DIV_16" 2 166 "3"
D G "T0_DIV_32" 2 167 "4"
D G "T0_DIV_64" 2 168 "5"
D G "T0_DIV_128" 2 169 "6"
D G "T0_DIV_256" 2 170 "7"
D G "T0_8_BIT" 2 173 "0"
D G "RTCC_INTERNAL" 2 177 "0"
D G "RTCC_EXT_L_TO_H" 2 178 "32"
D G "RTCC_EXT_H_TO_L" 2 179 "48"
D G "RTCC_DIV_1" 2 180 "8"
D G "RTCC_DIV_2" 2 181 "0"
D G "RTCC_DIV_4" 2 182 "1"
D G "RTCC_DIV_8" 2 183 "2"
D G "RTCC_DIV_16" 2 184 "3"
D G "RTCC_DIV_32" 2 185 "4"
D G "RTCC_DIV_64" 2 186 "5"
D G "RTCC_DIV_128" 2 187 "6"
D G "RTCC_DIV_256" 2 188 "7"
D G "RTCC_8_BIT" 2 189 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
F N "setup_wdt" 2 200 ""
V L "mode" 2 200 "int16" `123 
F B "setup_wdt" 2 200 "void(int16 mode)" `122 
F N "restart_wdt" 2 201 ""
F B "restart_wdt" 2 201 "void()" `124  "Constants used for SETUP_WDT() are:"
D G "WDT_18MS" 2 204 "8"
D G "WDT_36MS" 2 205 "9"
D G "WDT_72MS" 2 206 "10"
D G "WDT_144MS" 2 207 "11"
D G "WDT_288MS" 2 208 "12"
D G "WDT_576MS" 2 209 "13"
D G "WDT_1152MS" 2 210 "14"
D G "WDT_2304MS" 2 211 "15"
D G "WDT_ON" 2 216 "0x4000"
D G "WDT_OFF" 2 217 "0"
D G "WDT_DIV_16" 2 218 "0x100"
D G "WDT_DIV_8" 2 219 "0x300"
D G "WDT_DIV_4" 2 220 "0x500"
D G "WDT_DIV_2" 2 221 "0x700"
D G "WDT_TIMES_1" 2 222 "0x900" "Default"
D G "WDT_TIMES_2" 2 223 "0xB00"
D G "WDT_TIMES_4" 2 224 "0xD00"
D G "WDT_TIMES_8" 2 225 "0xF00"
D G "WDT_TIMES_16" 2 226 "0x1100"
D G "WDT_TIMES_32" 2 227 "0x1300"
D G "WDT_TIMES_64" 2 228 "0x1500"
D G "WDT_TIMES_128" 2 229 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
F N "setup_timer_1" 2 234 ""
V L "mode" 2 234 "int16" `126 
F B "setup_timer_1" 2 234 "void(int16 mode)" `125 
F N "get_timer1" 2 235 ""
F B "get_timer1" 2 235 "int16()" `127 
F N "set_timer1" 2 236 ""
V L "value" 2 236 "int16" `129 
F B "set_timer1" 2 236 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 2 239 "0"
D G "T1_INTERNAL" 2 240 "5"
D G "T1_EXTERNAL" 2 241 "7"
D G "T1_EXTERNAL_SYNC" 2 242 "3"
D G "T1_CLK_OUT" 2 244 "8"
D G "T1_DIV_BY_1" 2 246 "0"
D G "T1_DIV_BY_2" 2 247 "0x10"
D G "T1_DIV_BY_4" 2 248 "0x20"
D G "T1_DIV_BY_8" 2 249 "0x30"
D G "T1_GATE" 2 251 "0x40"
D G "T1_GATE_INVERTED" 2 252 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
F N "setup_timer_2" 2 257 ""
V L "mode" 2 257 "int8" `131 
V L "period" 2 257 "int8" `132 
V L "postscale" 2 257 "int8" `133 
F B "setup_timer_2" 2 257 "void(int8 mode,int8 period,int8 postscale)" `130 
F N "get_timer2" 2 258 ""
F B "get_timer2" 2 258 "int8()" `134 
F N "set_timer2" 2 259 ""
V L "value" 2 259 "int8" `136 
F B "set_timer2" 2 259 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 2 261 "0"
D G "T2_DIV_BY_1" 2 262 "4"
D G "T2_DIV_BY_4" 2 263 "5"
D G "T2_DIV_BY_16" 2 264 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
F N "setup_ccp1" 2 270 ""
V L "mode" 2 270 "int32" `138 
F B "setup_ccp1" 2 270 "void(int32 mode)" `137 
F N "setup_ccp1" 2 271 ""
V L "mode" 2 271 "int32" `140 
V L "pwm" 2 271 "int8" `141 
F B "setup_ccp1" 2 271 "void(int32 mode,int8 pwm)" `139 
F N "set_pwm1_duty" 2 272 ""
V L "value" 2 272 "int8" `143 
F B "set_pwm1_duty" 2 272 "void(int8 value)" `142 
F N "set_pwm1_duty" 2 273 ""
V L "value" 2 273 "int16" `145 
F B "set_pwm1_duty" 2 273 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 2 275 "0"
D G "CCP_CAPTURE_FE" 2 276 "0x04"
D G "CCP_CAPTURE_RE" 2 277 "0x05"
D G "CCP_CAPTURE_DIV_4" 2 278 "0x06"
D G "CCP_CAPTURE_DIV_16" 2 279 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 2 280 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 2 281 "0x09"
D G "CCP_COMPARE_INT" 2 282 "0x0A"
D G "CCP_COMPARE_RESET_TIMER" 2 283 "0x0B"
D G "CCP_PWM" 2 284 "0x0C"
D G "CCP_PWM_PLUS_1" 2 285 "0x1c"
D G "CCP_PWM_PLUS_2" 2 286 "0x2c"
D G "CCP_PWM_PLUS_3" 2 287 "0x3c"
D G "CCP_PWM_H_H" 2 294 "0x0c"
D G "CCP_PWM_H_L" 2 295 "0x0d"
D G "CCP_PWM_L_H" 2 296 "0x0e"
D G "CCP_PWM_L_L" 2 297 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 2 299 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 2 300 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 2 301 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 2 303 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 2 304 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 2 305 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 2 306 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 307 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 308 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 2 309 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 2 311 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 2 312 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 2 313 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 2 315 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 2 316 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 2 317 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 2 319 "0x80000000"
D G "CCP_PULSE_STEERING_A" 2 321 "0x01000000"
D G "CCP_PULSE_STEERING_B" 2 322 "0x02000000"
D G "CCP_PULSE_STEERING_C" 2 323 "0x04000000"
D G "CCP_PULSE_STEERING_D" 2 324 "0x08000000"
D G "CCP_PULSE_STEERING_SYNC" 2 325 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
F N "setup_ccp2" 2 328 ""
V L "mode" 2 328 "int32" `150 
F B "setup_ccp2" 2 328 "void(int32 mode)" `149 
F N "setup_ccp2" 2 329 ""
V L "mode" 2 329 "int32" `152 
V L "pwm" 2 329 "int8" `153 
F B "setup_ccp2" 2 329 "void(int32 mode,int8 pwm)" `151 
F N "set_pwm2_duty" 2 330 ""
V L "value" 2 330 "int8" `155 
F B "set_pwm2_duty" 2 330 "void(int8 value)" `154 
F N "set_pwm2_duty" 2 331 ""
V L "value" 2 331 "int16" `157 
F B "set_pwm2_duty" 2 331 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
F N "setup_spi" 2 339 ""
V L "mode" 2 339 "int32" `162 
F B "setup_spi" 2 339 "void(int32 mode)" `161 
F N "spi_write" 2 340 ""
V L "value" 2 340 "int8" `164 
F B "spi_write" 2 340 "void(int8 value)" `163 
F N "spi_write" 2 341 ""
V L "wait" 2 341 "int8" `166 
V L "value" 2 341 "int8" `167 
F B "spi_write" 2 341 "void(int8 wait,int8 value)" `165 
F N "spi_read" 2 342 ""
F B "spi_read" 2 342 "int8()" `168 
F N "spi_read" 2 343 ""
V L "value" 2 343 "int8" `170 
F B "spi_read" 2 343 "int8(int8 value)" `169 
F N "spi_data_is_in" 2 344 ""
F B "spi_data_is_in" 2 344 "int8()" `171  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 2 346 "0x00"
D G "SPI_MASTER" 2 347 "0x20"
D G "SPI_SLAVE" 2 348 "0x24"
D G "SPI_SCK_IDLE_HIGH" 2 349 "0x10"
D G "SPI_SCK_IDLE_LOW" 2 350 "0x00"
D G "SPI_CLK_DIV_4" 2 351 "0x00"
D G "SPI_CLK_DIV_16" 2 352 "0x01"
D G "SPI_CLK_DIV_64" 2 353 "0x02"
D G "SPI_CLK_T2" 2 354 "0x03"
D G "SPI_SS_DISABLED" 2 355 "0x01"
D G "SPI_XMIT_L_TO_H" 2 357 "0x4000"
D G "SPI_XMIT_H_TO_L" 2 358 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 2 360 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 361 "0x8000"
D G "SPI_L_TO_H" 2 364 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 365 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
F N "setup_uart" 2 369 ""
V L "baud" 2 369 "int32" `173 
F B "setup_uart" 2 369 "void(int32 baud)" `172 
F N "setup_uart" 2 370 ""
V L "baud" 2 370 "int32" `175 
V L "stream" 2 370 "int8" `176 
F B "setup_uart" 2 370 "void(int32 baud,int8 stream)" `174 
F N "setup_uart" 2 371 ""
V L "baud" 2 371 "int32" `178 
V L "stream" 2 371 "int8" `179 
V L "clock" 2 371 "int32" `180 
F B "setup_uart" 2 371 "void(int32 baud,int8 stream,int32 clock)" `177 
F N "set_uart_speed" 2 372 ""
V L "baud" 2 372 "int32" `182 
F B "set_uart_speed" 2 372 "void(int32 baud)" `181 
F N "set_uart_speed" 2 373 ""
V L "baud" 2 373 "int32" `184 
V L "stream" 2 373 "int8" `185 
F B "set_uart_speed" 2 373 "void(int32 baud,int8 stream)" `183 
F N "set_uart_speed" 2 374 ""
V L "baud" 2 374 "int32" `187 
V L "stream" 2 374 "int8" `188 
V L "clock" 2 374 "int32" `189 
F B "set_uart_speed" 2 374 "void(int32 baud,int8 stream,int32 clock)" `186  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 378 "2"
D G "UART_DATA" 2 379 "4"
D G "UART_AUTODETECT" 2 380 "8"
D G "UART_AUTODETECT_NOWAIT" 2 381 "9"
D G "UART_WAKEUP_ON_RDA" 2 382 "10"
D G "UART_SEND_BREAK" 2 383 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
F N "setup_comparator" 2 388 ""
V L "mode" 2 388 "int32" `191 
F B "setup_comparator" 2 388 "void(int32 mode)" `190  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 2 392 "0x00"
D G "NC_NC" 2 393 "0x00"
D G "CP1_A0_A3" 2 396 "0x00090080"
D G "CP1_A1_A3" 2 397 "0x000A0081"
D G "CP1_B3_A3" 2 398 "0x00880082"
D G "CP1_B1_A3" 2 399 "0x00280083"
D G "CP1_A0_VREF" 2 400 "0x00010084"
D G "CP1_A1_VREF" 2 401 "0x00020085"
D G "CP1_B3_VREF" 2 402 "0x00800086"
D G "CP1_B1_VREF" 2 403 "0x00200087"
D G "CP1_OUT_ON_A4" 2 405 "0x00000020"
D G "CP1_INVERT" 2 406 "0x00000010"
D G "CP1_ABSOLUTE_VREF" 2 407 "0x20000000"
D G "CP2_A0_A2" 2 410 "0x00058000"
D G "CP2_A1_A2" 2 411 "0x00068100"
D G "CP2_B3_A2" 2 412 "0x00848200"
D G "CP2_B1_A2" 2 413 "0x00248300"
D G "CP2_A0_VREF" 2 414 "0x00018400"
D G "CP2_A1_VREF" 2 415 "0x00028500"
D G "CP2_B3_VREF" 2 416 "0x00808600"
D G "CP2_B1_VREF" 2 417 "0x00208700"
D G "CP2_OUT_ON_A5" 2 419 "0x00002000"
D G "CP2_INVERT" 2 420 "0x00001000"
D G "CP2_ABSOLUTE_VREF" 2 421 "0x10000000"
D G "CP2_T1_SYNC" 2 424 "0x01000000"
D G "CP2_T1_GATE" 2 425 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
F N "setup_vref" 2 433 ""
V L "mode" 2 433 "int8" `195 
F B "setup_vref" 2 433 "void(int8 mode)" `194  "Constants used in setup_vref() are:"
D G "VREF_LOW" 2 435 "0xa0"
D G "VREF_HIGH" 2 436 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
F N "setup_oscillator" 2 442 ""
V L "mode" 2 442 "int8" `197 
F B "setup_oscillator" 2 442 "int8(int8 mode)" `196 
F N "setup_oscillator" 2 443 ""
V L "mode" 2 443 "int8" `199 
V L "tune" 2 443 "sint8" `200 
F B "setup_oscillator" 2 443 "int8(int8 mode,sint8 tune)" `198  "Constants used in setup_oscillator() are:"
D G "OSC_31KHZ" 2 445 "1"
D G "OSC_125KHZ" 2 446 "0x11"
D G "OSC_250KHZ" 2 447 "0x21"
D G "OSC_500KHZ" 2 448 "0x31"
D G "OSC_1MHZ" 2 449 "0x41"
D G "OSC_2MHZ" 2 450 "0x51"
D G "OSC_4MHZ" 2 451 "0x61"
D G "OSC_8MHZ" 2 452 "0x71"
D G "OSC_INTRC" 2 453 "1"
D G "OSC_NORMAL" 2 454 "0"
D G "OSC_STATE_STABLE" 2 458 "4"
D G "OSC_31KHZ_STABLE" 2 459 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
F N "setup_adc" 2 466 ""
V L "mode" 2 466 "int16" `202 
F B "setup_adc" 2 466 "void(int16 mode)" `201 
F N "read_adc" 2 467 ""
F B "read_adc" 2 467 "int8()" `203 
F N "read_adc" 2 468 ""
V L "mode" 2 468 "int8" `205 
F B "read_adc" 2 468 "int8(int8 mode)" `204 
F N "read_adc" 2 469 ""
f G "read_adc" 2 469 "int16()" `206 
F N "read_adc" 2 470 ""
V L "mode" 2 470 "int8" `207 
f G "read_adc" 2 470 "int16(int8 mode)" `206 
F N "adc_done" 2 471 ""
F B "adc_done" 2 471 "int8(int8 mode)" `206  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 473 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 2 474 "0x100"
D G "ADC_CLOCK_DIV_8" 2 475 "0x40"
D G "ADC_CLOCK_DIV_32" 2 476 "0x80"
D G "ADC_CLOCK_INTERNAL" 2 477 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
F N "setup_adc_ports" 2 480 ""
V L "pins" 2 480 "int32" `208 
F B "setup_adc_ports" 2 480 "void(int32 pins)" `207 
F N "setup_adc_ports" 2 481 ""
V L "pins" 2 481 "int32" `210 
V L "reference" 2 481 "int32" `211 
F B "setup_adc_ports" 2 481 "void(int32 pins,int32 reference)" `209 
F N "set_analog_pins" 2 482 ""
V L "pins" 2 482 "int32" `213 
F B "set_analog_pins" 2 482 "void(int32 pins)" `212 
F N "set_analog_pins" 2 483 ""
V L "pins" 2 483 "int32" `215 
V L "reference" 2 483 "int32" `216 
F B "set_analog_pins" 2 483 "void(int32 pins,int32 reference)" `214 
F N "set_adc_channel" 2 484 ""
V L "channel" 2 484 "int8" `218 
F B "set_adc_channel" 2 484 "void(int8 channel)" `217  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
D G "sAN0" 2 488 "1" "| A0"
D G "sAN1" 2 489 "2" "| A1"
D G "sAN2" 2 490 "4" "| A2"
D G "sAN3" 2 491 "8" "| A3"
D G "sAN4" 2 492 "16" "| A5"
D G "sAN5" 2 493 "32" "| E0"
D G "sAN6" 2 494 "64" "| E1"
D G "sAN7" 2 495 "128" "| E2"
D G "sAN8" 2 496 "0x10000" "| B2"
D G "sAN9" 2 497 "0x20000" "| B3"
D G "sAN10" 2 498 "0x40000" "| B1"
D G "sAN11" 2 499 "0x80000" "| B4"
D G "sAN12" 2 500 "0x100000" "| B0"
D G "sAN13" 2 501 "0x200000" "| B5"
D G "NO_ANALOGS" 2 502 "0" "None"
D G "ALL_ANALOG" 2 503 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
D G "VSS_VDD" 2 506 "0x0000" "| Range 0-Vdd"
D G "VSS_VREF" 2 507 "0x1000" "| Range 0-Vref"
D G "VREF_VREF" 2 508 "0x3000" "| Range Vref-Vref"
D G "VREF_VDD" 2 509 "0x2000" "| Range Vref-Vdd"
D G "ADC_START_AND_READ" 2 512 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 2 513 "1"
D G "ADC_READ_ONLY" 2 514 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
F N "abs" 2 520 ""
V L "x" 2 520 "sint8" `220 
F B "abs" 2 520 "sint8(sint8 x)" `219 
F N "abs" 2 521 ""
V L "x" 2 521 "sint16" `222 
F B "abs" 2 521 "sint16(sint16 x)" `221 
F N "abs" 2 522 ""
V L "x" 2 522 "sint32" `224 
F B "abs" 2 522 "sint32(sint32 x)" `223 
F N "abs" 2 523 ""
V L "x" 2 523 "float" `226 
F B "abs" 2 523 "float(float x)" `225 
F N "_mul" 2 524 ""
V L "??65535" 2 524 "int8" `228 
V L "??65535" 2 524 "int8" `229 
F B "_mul" 2 524 "int16(int8 ,int8 )" `227 
F N "_mul" 2 525 ""
V L "??65535" 2 525 "sint8" `231 
V L "??65535" 2 525 "sint8" `232 
F B "_mul" 2 525 "sint16(sint8 ,sint8 )" `230 
F N "_mul" 2 526 ""
V L "??65535" 2 526 "int16" `234 
V L "??65535" 2 526 "int16" `235 
F B "_mul" 2 526 "int32(int16 ,int16 )" `233 
F N "_mul" 2 527 ""
V L "??65535" 2 527 "sint16" `237 
V L "??65535" 2 527 "sint16" `238 
F B "_mul" 2 527 "sint32(sint16 ,sint16 )" `236  "Memory Manipulation Prototypes:"
F N "read_bank" 2 530 ""
V L "bank" 2 530 "int8" `240 
V L "offset" 2 530 "int8" `241 
F B "read_bank" 2 530 "int8(int8 bank,int8 offset)" `239 
F N "write_bank" 2 531 ""
V L "bank" 2 531 "int8" `243 
V L "offset" 2 531 "int8" `244 
V L "value" 2 531 "int8" `245 
F B "write_bank" 2 531 "void(int8 bank,int8 offset,int8 value)" `242 
F N "strcpy" 2 532 ""
V L "dest" 2 532 "*int8" `247 
V L "src" 2 532 "*int8" `248 
F B "strcpy" 2 532 "void(*int8 dest,*int8 src)" `246 
F N "memset" 2 533 ""
V L "destination" 2 533 "*int8" `250 
V L "value" 2 533 "int8" `251 
V L "num" 2 533 "int16" `252 
F B "memset" 2 533 "void(*int8 destination,int8 value,int16 num)" `249 
F N "memcpy" 2 534 ""
V L "destination" 2 534 "*int8" `254 
V L "source" 2 534 "*int8" `255 
V L "num" 2 534 "int16" `256 
F B "memcpy" 2 534 "void(*int8 destination,*int8 source,int16 num)" `253  "String Prototypes:"
F N "toupper" 2 537 ""
V L "cvalue" 2 537 "int8" `258 
F B "toupper" 2 537 "int8(int8 cvalue)" `257 
F N "tolower" 2 538 ""
V L "cvalue" 2 538 "int8" `260 
F B "tolower" 2 538 "int8(int8 cvalue)" `259 
F N "sprintf" 2 539 ""
V L "string" 2 539 "*int8" `262 
V L "cstring" 2 539 "*int8" `263 
F B "sprintf" 2 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `261  "Data Manipulators Prototypes:"
F N "shift_left" 2 542 ""
V L "address" 2 542 "*int8" `266 
V L "bytes" 2 542 "int8" `267 
V L "value" 2 542 "int8" `268 
F B "shift_left" 2 542 "int8(*int8 address,int8 bytes,int8 value)" `265 
F N "shift_right" 2 543 ""
V L "address" 2 543 "*int8" `270 
V L "bytes" 2 543 "int8" `271 
V L "value" 2 543 "int8" `272 
F B "shift_right" 2 543 "int8(*int8 address,int8 bytes,int8 value)" `269 
F N "rotate_left" 2 544 ""
V L "address" 2 544 "*int8" `274 
V L "bytes" 2 544 "int8" `275 
F B "rotate_left" 2 544 "void(*int8 address,int8 bytes)" `273 
F N "rotate_right" 2 545 ""
V L "address" 2 545 "*int8" `277 
V L "bytes" 2 545 "int8" `278 
F B "rotate_right" 2 545 "void(*int8 address,int8 bytes)" `276 
F N "swap" 2 546 ""
V L "value" 2 546 "int8" `280 
F B "swap" 2 546 "void(int8 value)" `279 
F N "make8" 2 547 ""
V L "var" 2 547 "int16" `282 
V L "offset" 2 547 "int8" `283 
F B "make8" 2 547 "int8(int16 var,int8 offset)" `281 
F N "make8" 2 548 ""
V L "var" 2 548 "int32" `285 
V L "offset" 2 548 "int8" `286 
F B "make8" 2 548 "int8(int32 var,int8 offset)" `284 
F N "make16" 2 549 ""
V L "varhigh" 2 549 "int8" `288 
V L "varlow" 2 549 "int8" `289 
F B "make16" 2 549 "int16(int8 varhigh,int8 varlow)" `287 
F N "make32" 2 550 ""
V L "var1" 2 550 "int16" `291 
F B "make32" 2 550 "int32(int16 var1)" `290 
F N "make32" 2 551 ""
V L "var1" 2 551 "int16" `293 
V L "var2" 2 551 "int16" `294 
F B "make32" 2 551 "int32(int16 var1,int16 var2)" `292 
F N "make32" 2 552 ""
V L "var1" 2 552 "int16" `296 
V L "var2" 2 552 "int8" `297 
F B "make32" 2 552 "int32(int16 var1,int8 var2)" `295 
F N "make32" 2 553 ""
V L "var1" 2 553 "int16" `299 
V L "var2" 2 553 "int8" `300 
V L "var3" 2 553 "int8" `301 
F B "make32" 2 553 "int32(int16 var1,int8 var2,int8 var3)" `298 
F N "make32" 2 554 ""
V L "var1" 2 554 "int8" `303 
F B "make32" 2 554 "int32(int8 var1)" `302 
F N "make32" 2 555 ""
V L "var1" 2 555 "int8" `305 
V L "var2" 2 555 "int8" `306 
F B "make32" 2 555 "int32(int8 var1,int8 var2)" `304 
F N "make32" 2 556 ""
V L "var1" 2 556 "int8" `308 
V L "var2" 2 556 "int8" `309 
V L "var3" 2 556 "int8" `310 
F B "make32" 2 556 "int32(int8 var1,int8 var2,int8 var3)" `307 
F N "make32" 2 557 ""
V L "var1" 2 557 "int8" `312 
V L "var2" 2 557 "int8" `313 
V L "var3" 2 557 "int8" `314 
V L "var4" 2 557 "int8" `315 
F B "make32" 2 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `311 
F N "make32" 2 558 ""
V L "var1" 2 558 "int8" `317 
V L "var2" 2 558 "int16" `318 
F B "make32" 2 558 "int32(int8 var1,int16 var2)" `316 
F N "make32" 2 559 ""
V L "var1" 2 559 "int8" `320 
V L "var2" 2 559 "int16" `321 
V L "var3" 2 559 "int8" `322 
F B "make32" 2 559 "int32(int8 var1,int16 var2,int8 var3)" `319 
F N "make32" 2 560 ""
V L "var1" 2 560 "int8" `324 
V L "var2" 2 560 "int8" `325 
V L "var3" 2 560 "int16" `326 
F B "make32" 2 560 "int32(int8 var1,int8 var2,int16 var3)" `323 
F N "bit_set" 2 561 ""
V L "var" 2 561 "int8" `328 
V L "bit" 2 561 "int8" `329 
F B "bit_set" 2 561 "void(int8 var,int8 bit)" `327 
F N "bit_set" 2 562 ""
V L "var" 2 562 "int16" `331 
V L "bit" 2 562 "int8" `332 
F B "bit_set" 2 562 "void(int16 var,int8 bit)" `330 
F N "bit_set" 2 563 ""
V L "var" 2 563 "int32" `334 
V L "bit" 2 563 "int8" `335 
F B "bit_set" 2 563 "void(int32 var,int8 bit)" `333 
F N "bit_clear" 2 564 ""
V L "var" 2 564 "int8" `337 
V L "bit" 2 564 "int8" `338 
F B "bit_clear" 2 564 "void(int8 var,int8 bit)" `336 
F N "bit_clear" 2 565 ""
V L "var" 2 565 "int16" `340 
V L "bit" 2 565 "int8" `341 
F B "bit_clear" 2 565 "void(int16 var,int8 bit)" `339 
F N "bit_clear" 2 566 ""
V L "var" 2 566 "int32" `343 
V L "bit" 2 566 "int8" `344 
F B "bit_clear" 2 566 "void(int32 var,int8 bit)" `342 
F N "bit_test" 2 567 ""
V L "var" 2 567 "int8" `346 
V L "bit" 2 567 "int8" `347 
F B "bit_test" 2 567 "int8(int8 var,int8 bit)" `345 
F N "bit_test" 2 568 ""
V L "var" 2 568 "int16" `349 
V L "bit" 2 568 "int8" `350 
F B "bit_test" 2 568 "int8(int16 var,int8 bit)" `348 
F N "bit_test" 2 569 ""
V L "var" 2 569 "int32" `352 
V L "bit" 2 569 "int8" `353 
F B "bit_test" 2 569 "int8(int32 var,int8 bit)" `351  "#use delay() Prototypes:"
F N "delay_cycles" 2 572 ""
V L "count" 2 572 "int8" `355 
F B "delay_cycles" 2 572 "void(int8 count)" `354 
F N "delay_ms" 2 573 ""
V L "time" 2 573 "int16" `357 
F B "delay_ms" 2 573 "void(int16 time)" `356 
F N "delay_us" 2 574 ""
V L "time" 2 574 "int16" `359 
F B "delay_us" 2 574 "void(int16 time)" `358  "#use rs232() Prototypes:"
F N "putchar" 2 577 ""
V L "cdata" 2 577 "int8" `361 
F B "putchar" 2 577 "void(int8 cdata)" `360 
F N "putchar" 2 578 ""
V L "cdata" 2 578 "int8" `363 
V L "stream" 2 578 "int8" `364 
F B "putchar" 2 578 "void(int8 cdata,int8 stream)" `362 
F N "puts" 2 579 ""
V L "string" 2 579 "*int8" `366 
F B "puts" 2 579 "void(*int8 string)" `365 
F N "puts" 2 580 ""
V L "string" 2 580 "*int8" `368 
V L "stream" 2 580 "int8" `369 
F B "puts" 2 580 "void(*int8 string,int8 stream)" `367 
F N "getch" 2 581 ""
F B "getch" 2 581 "int8()" `370 
F N "getch" 2 582 ""
V L "stream" 2 582 "int8" `372 
F B "getch" 2 582 "int8(int8 stream)" `371 
F N "gets" 2 583 ""
V L "string" 2 583 "*int8" `374 
F B "gets" 2 583 "void(*int8 string)" `373 
F N "gets" 2 584 ""
V L "string" 2 584 "*int8" `376 
V L "stream" 2 584 "int8" `377 
F B "gets" 2 584 "void(*int8 string,int8 stream)" `375 
F N "kbhit" 2 585 ""
F B "kbhit" 2 585 "int8()" `378 
F N "kbhit" 2 586 ""
V L "stream" 2 586 "int8" `380 
F B "kbhit" 2 586 "int8(int8 stream)" `379 
F N "printf" 2 587 ""
V L "string" 2 587 "*int8" `382 
F B "printf" 2 587 "void(*int8 string,*int8 _VA_LIST)" `381 
F N "fprintf" 2 588 ""
V L "stream" 2 588 "int8" `385 
V L "string" 2 588 "*int8" `386 
F B "fprintf" 2 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `384 
F N "putc_send" 2 589 ""
F B "putc_send" 2 589 "void()" `388 
F N "fputc_send" 2 590 ""
V L "stream" 2 590 "int8" `390 
F B "fputc_send" 2 590 "void(int8 stream)" `389 
F N "rcv_buffer_full" 2 591 ""
F B "rcv_buffer_full" 2 591 "int8()" `391 
F N "rcv_buffer_full" 2 592 ""
V L "stream" 2 592 "int8" `393 
F B "rcv_buffer_full" 2 592 "int8(int8 stream)" `392 
F N "rcv_buffer_bytes" 2 593 ""
F B "rcv_buffer_bytes" 2 593 "int16()" `394 
F N "rcv_buffer_bytes" 2 594 ""
V L "stream" 2 594 "int8" `396 
F B "rcv_buffer_bytes" 2 594 "int16(int8 stream)" `395 
F N "tx_buffer_full" 2 595 ""
F B "tx_buffer_full" 2 595 "int8()" `397 
F N "tx_buffer_full" 2 596 ""
V L "stream" 2 596 "int8" `399 
F B "tx_buffer_full" 2 596 "int8(int8 stream)" `398 
F N "tx_buffer_bytes" 2 597 ""
F B "tx_buffer_bytes" 2 597 "int16()" `400 
F N "tx_buffer_bytes" 2 598 ""
V L "stream" 2 598 "int8" `402 
F B "tx_buffer_bytes" 2 598 "int16(int8 stream)" `401 
F N "linbus_header" 2 599 ""
V L "identifier" 2 599 "int8" `404 
F B "linbus_header" 2 599 "int8(int8 identifier)" `403 
F N "linbus_header" 2 600 ""
V L "stream" 2 600 "int8" `406 
V L "identifier" 2 600 "int8" `407 
F B "linbus_header" 2 600 "int8(int8 stream,int8 identifier)" `405 
F N "linbus_header_hit" 2 601 ""
F B "linbus_header_hit" 2 601 "int8()" `408 
F N "linbus_header_hit" 2 602 ""
V L "stream" 2 602 "int8" `410 
F B "linbus_header_hit" 2 602 "int8(int8 stream)" `409 
F N "linbus_header_get" 2 603 ""
F B "linbus_header_get" 2 603 "int8()" `411 
F N "linbus_header_get" 2 604 ""
V L "stream" 2 604 "int8" `413 
F B "linbus_header_get" 2 604 "int8(int8 stream)" `412 
F N "linbus_rx_response" 2 605 ""
V L "DataPtr" 2 605 "*int8" `415 
V L "count" 2 605 "int8" `416 
F B "linbus_rx_response" 2 605 "int8(*int8 DataPtr,int8 count)" `414 
F N "linbus_rx_response" 2 606 ""
V L "stream" 2 606 "int8" `418 
V L "DataPtr" 2 606 "*int8" `419 
V L "count" 2 606 "int8" `420 
F B "linbus_rx_response" 2 606 "int8(int8 stream,*int8 DataPtr,int8 count)" `417 
F N "linbus_tx_response" 2 607 ""
V L "DataPtr" 2 607 "*int8" `422 
V L "count" 2 607 "int8" `423 
F B "linbus_tx_response" 2 607 "void(*int8 DataPtr,int8 count)" `421 
F N "linbus_tx_response" 2 608 ""
V L "stream" 2 608 "int8" `425 
V L "DataPtr" 2 608 "*int8" `426 
V L "count" 2 608 "int8" `427 
F B "linbus_tx_response" 2 608 "void(int8 stream,*int8 DataPtr,int8 count)" `424 
F N "linbus_checksum_type" 2 609 ""
V L "type" 2 609 "int8" `429 
F B "linbus_checksum_type" 2 609 "void(int8 type)" `428 
F N "linbus_checksum_type" 2 610 ""
V L "stream" 2 610 "int8" `431 
V L "type" 2 610 "int8" `432 
F B "linbus_checksum_type" 2 610 "void(int8 stream,int8 type)" `430  "#use i2c() Prototypes:"
F N "i2c_read" 2 613 ""
F B "i2c_read" 2 613 "int8()" `433 
F N "i2c_read" 2 614 ""
V L "ack" 2 614 "int8" `435 
F B "i2c_read" 2 614 "int8(int8 ack)" `434 
F N "i2c_read" 2 615 ""
V L "stream" 2 615 "int8" `437 
V L "ack" 2 615 "int8" `438 
F B "i2c_read" 2 615 "int8(int8 stream,int8 ack)" `436 
F N "i2c_write" 2 616 ""
V L "data" 2 616 "int8" `440 
F B "i2c_write" 2 616 "int8(int8 data)" `439 
F N "i2c_write" 2 617 ""
V L "stream" 2 617 "int8" `442 
V L "data" 2 617 "int8" `443 
F B "i2c_write" 2 617 "int8(int8 stream,int8 data)" `441 
F N "i2c_start" 2 618 ""
F B "i2c_start" 2 618 "void()" `444 
F N "i2c_start" 2 619 ""
V L "stream" 2 619 "int8" `446 
F B "i2c_start" 2 619 "void(int8 stream)" `445 
F N "i2c_start" 2 620 ""
V L "stream" 2 620 "int8" `448 
V L "restart" 2 620 "int8" `449 
F B "i2c_start" 2 620 "void(int8 stream,int8 restart)" `447 
F N "i2c_stop" 2 621 ""
F B "i2c_stop" 2 621 "void()" `450 
F N "i2c_stop" 2 622 ""
V L "stream" 2 622 "int8" `452 
F B "i2c_stop" 2 622 "void(int8 stream)" `451 
F N "i2c_isr_state" 2 623 ""
F B "i2c_isr_state" 2 623 "int8()" `453 
F N "i2c_slaveaddr" 2 624 ""
V L "addr" 2 624 "int8" `455 
F B "i2c_slaveaddr" 2 624 "void(int8 addr)" `454 
F N "i2c_slaveaddr" 2 625 ""
V L "stream" 2 625 "int8" `457 
V L "addr" 2 625 "int8" `458 
F B "i2c_slaveaddr" 2 625 "void(int8 stream,int8 addr)" `456 
F N "i2c_poll" 2 626 ""
F B "i2c_poll" 2 626 "int8()" `459 
F N "i2c_poll" 2 627 ""
V L "stream" 2 627 "int8" `461 
F B "i2c_poll" 2 627 "int8(int8 stream)" `460 
F N "i2c_init" 2 628 ""
V L "baud" 2 628 "int32" `463 
F B "i2c_init" 2 628 "void(int32 baud)" `462 
F N "i2c_init" 2 629 ""
V L "stream" 2 629 "int8" `465 
V L "baud" 2 629 "int32" `466 
F B "i2c_init" 2 629 "void(int8 stream,int32 baud)" `464 
F N "i2c_transfer" 2 630 ""
V L "address" 2 630 "int8" `468 
V L "wData" 2 630 "*int8" `469 
V L "wCount" 2 630 "int8" `470 
F B "i2c_transfer" 2 630 "int8(int8 address,*int8 wData,int8 wCount)" `467 
F N "i2c_transfer" 2 631 ""
V L "address" 2 631 "int8" `472 
V L "wData" 2 631 "*int8" `473 
V L "wCount" 2 631 "int8" `474 
V L "rData" 2 631 "*int8" `475 
V L "rCount" 2 631 "*int8" `476 
F B "i2c_transfer" 2 631 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `471 
F N "i2c_transfer" 2 632 ""
V L "stream" 2 632 "int8" `478 
V L "address" 2 632 "int8" `479 
V L "wData" 2 632 "*int8" `480 
V L "wCount" 2 632 "int8" `481 
F B "i2c_transfer" 2 632 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `477 
F N "i2c_transfer" 2 633 ""
V L "stream" 2 633 "int8" `483 
V L "address" 2 633 "int8" `484 
V L "wData" 2 633 "*int8" `485 
V L "wCount" 2 633 "int8" `486 
V L "rData" 2 633 "*int8" `487 
V L "rCount" 2 633 "*int8" `488 
F B "i2c_transfer" 2 633 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `482 
F N "i2c_transfer_out" 2 634 ""
V L "address" 2 634 "int8" `490 
V L "wData" 2 634 "*int8" `491 
V L "wCount" 2 634 "int8" `492 
F B "i2c_transfer_out" 2 634 "int8(int8 address,*int8 wData,int8 wCount)" `489 
F N "i2c_transfer_out" 2 635 ""
V L "stream" 2 635 "int8" `494 
V L "address" 2 635 "int8" `495 
V L "wData" 2 635 "*int8" `496 
V L "wCount" 2 635 "int8" `497 
F B "i2c_transfer_out" 2 635 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `493 
F N "i2c_transfer_in" 2 636 ""
V L "address" 2 636 "int8" `499 
V L "rData" 2 636 "*int8" `500 
V L "rCount" 2 636 "int8" `501 
F B "i2c_transfer_in" 2 636 "int8(int8 address,*int8 rData,int8 rCount)" `498 
F N "i2c_transfer_in" 2 637 ""
V L "stream" 2 637 "int8" `503 
V L "address" 2 637 "int8" `504 
V L "rData" 2 637 "*int8" `505 
V L "rCount" 2 637 "int8" `506 
F B "i2c_transfer_in" 2 637 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `502  "#use spi() Prototypes:"
F N "spi_xfer" 2 640 ""
F B "spi_xfer" 2 640 "int8()" `507 
F N "spi_xfer" 2 641 ""
f G "spi_xfer" 2 641 "int16()" `508 
F N "spi_xfer" 2 642 ""
f G "spi_xfer" 2 642 "int32()" `508 
F N "spi_xfer" 2 643 ""
V L "data" 2 643 "int8" `509 
F B "spi_xfer" 2 643 "int8(int8 data)" `508 
F N "spi_xfer" 2 644 ""
V L "data" 2 644 "int16" `511 
F B "spi_xfer" 2 644 "int16(int16 data)" `510 
F N "spi_xfer" 2 645 ""
V L "data" 2 645 "int32" `513 
F B "spi_xfer" 2 645 "int32(int32 data)" `512 
F N "spi_xfer" 2 646 ""
V L "stream" 2 646 "int8" `515 
V L "data" 2 646 "int8" `516 
F B "spi_xfer" 2 646 "int8(int8 stream,int8 data)" `514 
F N "spi_xfer" 2 647 ""
V L "stream" 2 647 "int8" `518 
V L "data" 2 647 "int16" `519 
F B "spi_xfer" 2 647 "int16(int8 stream,int16 data)" `517 
F N "spi_xfer" 2 648 ""
V L "stream" 2 648 "int8" `521 
V L "data" 2 648 "int32" `522 
F B "spi_xfer" 2 648 "int32(int8 stream,int32 data)" `520 
F N "spi_xfer" 2 649 ""
V L "stream" 2 649 "int8" `524 
V L "data" 2 649 "int8" `525 
V L "bits" 2 649 "int8" `526 
F B "spi_xfer" 2 649 "int8(int8 stream,int8 data,int8 bits)" `523 
F N "spi_xfer" 2 650 ""
V L "stream" 2 650 "int8" `528 
V L "data" 2 650 "int16" `529 
V L "bits" 2 650 "int8" `530 
F B "spi_xfer" 2 650 "int16(int8 stream,int16 data,int8 bits)" `527 
F N "spi_xfer" 2 651 ""
V L "stream" 2 651 "int8" `532 
V L "data" 2 651 "int32" `533 
V L "bits" 2 651 "int8" `534 
F B "spi_xfer" 2 651 "int32(int8 stream,int32 data,int8 bits)" `531 
F N "spi_init" 2 652 ""
V L "baud" 2 652 "int32" `536 
F B "spi_init" 2 652 "void(int32 baud)" `535 
F N "spi_init" 2 653 ""
V L "stream" 2 653 "int8" `538 
V L "baud" 2 653 "int32" `539 
F B "spi_init" 2 653 "void(int8 stream,int32 baud)" `537 
F N "spi_speed" 2 654 ""
V L "baud" 2 654 "int32" `541 
F B "spi_speed" 2 654 "void(int32 baud)" `540 
F N "spi_speed" 2 655 ""
V L "stream" 2 655 "int8" `543 
V L "baud" 2 655 "int32" `544 
F B "spi_speed" 2 655 "void(int8 stream,int32 baud)" `542 
F N "spi_speed" 2 656 ""
V L "stream" 2 656 "int8" `546 
V L "baud" 2 656 "int32" `547 
V L "clock" 2 656 "int32" `548 
F B "spi_speed" 2 656 "void(int8 stream,int32 baud,int32 clock)" `545 
F N "spi_prewrite" 2 657 ""
V L "data" 2 657 "int8" `550 
F B "spi_prewrite" 2 657 "void(int8 data)" `549 
F N "spi_prewrite" 2 658 ""
V L "data" 2 658 "int16" `552 
F B "spi_prewrite" 2 658 "void(int16 data)" `551 
F N "spi_prewrite" 2 659 ""
V L "data" 2 659 "int32" `554 
F B "spi_prewrite" 2 659 "void(int32 data)" `553 
F N "spi_prewrite" 2 660 ""
V L "??65535" 2 660 "int8" `556 
V L "data" 2 660 "int8" `557 
F B "spi_prewrite" 2 660 "void(int8 ,int8 data)" `555 
F N "spi_prewrite" 2 661 ""
V L "??65535" 2 661 "int8" `559 
V L "data" 2 661 "int16" `560 
F B "spi_prewrite" 2 661 "void(int8 ,int16 data)" `558 
F N "spi_prewrite" 2 662 ""
V L "??65535" 2 662 "int8" `562 
V L "data" 2 662 "int32" `563 
F B "spi_prewrite" 2 662 "void(int8 ,int32 data)" `561 
F N "spi_xfer_in" 2 663 ""
F B "spi_xfer_in" 2 663 "int8()" `564 
F N "spi_xfer_in" 2 664 ""
f G "spi_xfer_in" 2 664 "int16()" `565 
F N "spi_xfer_in" 2 665 ""
f G "spi_xfer_in" 2 665 "int32()" `565 
F N "spi_xfer_in" 2 666 ""
V L "bits" 2 666 "int8" `566 
F B "spi_xfer_in" 2 666 "int8(int8 bits)" `565 
F N "spi_xfer_in" 2 667 ""
V L "bits" 2 667 "int8" `568 
f G "spi_xfer_in" 2 667 "int16(int8 bits)" `567 
F N "spi_xfer_in" 2 668 ""
V L "bits" 2 668 "int8" `568 
f G "spi_xfer_in" 2 668 "int32(int8 bits)" `567 
F N "spi_xfer_in" 2 669 ""
V L "stream" 2 669 "int8" `568 
V L "bits" 2 669 "int8" `569 
F B "spi_xfer_in" 2 669 "int8(int8 stream,int8 bits)" `567 
F N "spi_xfer_in" 2 670 ""
V L "stream" 2 670 "int8" `568 
V L "bits" 2 670 "int8" `572 
f G "spi_xfer_in" 2 670 "int16(int8 stream,int8 bits)" `570 
F N "spi_xfer_in" 2 671 ""
V L "stream" 2 671 "int8" `568 
V L "bits" 2 671 "int8" `572 
f G "spi_xfer_in" 2 671 "int32(int8 stream,int8 bits)" `570 
F N "spi_transfer" 2 672 ""
V L "wData" 2 672 "*int8" `571 
V L "rData" 2 672 "*int8" `572 
V L "count" 2 672 "int16" `573 
F B "spi_transfer" 2 672 "void(*int8 wData,*int8 rData,int16 count)" `570 
F N "spi_transfer" 2 673 ""
V L "stream" 2 673 "int8" `575 
V L "wData" 2 673 "*int8" `576 
V L "rData" 2 673 "*int8" `577 
V L "count" 2 673 "int16" `578 
F B "spi_transfer" 2 673 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `574 
F N "spi_transfer_write" 2 674 ""
V L "wData" 2 674 "*int8" `580 
V L "count" 2 674 "int16" `581 
F B "spi_transfer_write" 2 674 "void(*int8 wData,int16 count)" `579 
F N "spi_transfer_write" 2 675 ""
V L "stream" 2 675 "int8" `583 
V L "wData" 2 675 "*int8" `584 
V L "count" 2 675 "int16" `585 
F B "spi_transfer_write" 2 675 "void(int8 stream,*int8 wData,int16 count)" `582 
F N "spi_transfer_read" 2 676 ""
V L "rData" 2 676 "*int8" `587 
V L "count" 2 676 "int16" `588 
F B "spi_transfer_read" 2 676 "void(*int8 rData,int16 count)" `586 
F N "spi_transfer_read" 2 677 ""
V L "stream" 2 677 "int8" `590 
V L "rData" 2 677 "*int8" `591 
V L "count" 2 677 "int16" `592 
F B "spi_transfer_read" 2 677 "void(int8 stream,*int8 rData,int16 count)" `589  "#use rtos() Prototypes:"
F N "rtos_run" 2 680 ""
F B "rtos_run" 2 680 "void()" `593 
F N "rtos_yield" 2 681 ""
F B "rtos_yield" 2 681 "void()" `594 
F N "rtos_enable" 2 682 ""
V L "task" 2 682 "int8" `596 
F B "rtos_enable" 2 682 "void(int8 task)" `595 
F N "rtos_disable" 2 683 ""
V L "task" 2 683 "int8" `598 
F B "rtos_disable" 2 683 "void(int8 task)" `597 
F N "rtos_terminate" 2 684 ""
F B "rtos_terminate" 2 684 "void()" `599 
F N "rtos_await" 2 685 ""
V L "flag" 2 685 "int8" `601 
F B "rtos_await" 2 685 "void(int8 flag)" `600 
F N "rtos_wait" 2 686 ""
V L "sem" 2 686 "int8" `603 
F B "rtos_wait" 2 686 "void(int8 sem)" `602 
F N "rtos_signal" 2 687 ""
V L "sem" 2 687 "int8" `605 
F B "rtos_signal" 2 687 "void(int8 sem)" `604 
F N "rtos_msg_send" 2 688 ""
V L "task" 2 688 "int8" `607 
V L "msg" 2 688 "int8" `608 
F B "rtos_msg_send" 2 688 "void(int8 task,int8 msg)" `606 
F N "rtos_msg_read" 2 689 ""
F B "rtos_msg_read" 2 689 "int8()" `609 
F N "rtos_msg_poll" 2 690 ""
F B "rtos_msg_poll" 2 690 "int8()" `610 
F N "rtos_overrun" 2 691 ""
V L "task" 2 691 "int8" `612 
F B "rtos_overrun" 2 691 "int8(int8 task)" `611 
F N "rtos_stats" 2 692 ""
V L "task" 2 692 "int8" `614 
V L "stat" 2 692 "*int8" `615 
F B "rtos_stats" 2 692 "void(int8 task,*int8 stat)" `613  "#use timer() Prototypes:"
F N "get_ticks" 2 695 ""
F B "get_ticks" 2 695 "int8()" `616 
F N "get_ticks" 2 696 ""
f G "get_ticks" 2 696 "int16()" `617 
F N "get_ticks" 2 697 ""
f G "get_ticks" 2 697 "int32()" `617 
F N "get_ticks" 2 698 ""
V L "stream" 2 698 "int8" `618 
F B "get_ticks" 2 698 "int8(int8 stream)" `617 
F N "get_ticks" 2 699 ""
V L "stream" 2 699 "int8" `620 
f G "get_ticks" 2 699 "int16(int8 stream)" `619 
F N "get_ticks" 2 700 ""
V L "stream" 2 700 "int8" `620 
f G "get_ticks" 2 700 "int32(int8 stream)" `619 
F N "set_ticks" 2 701 ""
V L "value" 2 701 "int8" `620 
F B "set_ticks" 2 701 "void(int8 value)" `619 
F N "set_ticks" 2 702 ""
V L "value" 2 702 "int16" `622 
F B "set_ticks" 2 702 "void(int16 value)" `621 
F N "set_ticks" 2 703 ""
V L "value" 2 703 "int32" `624 
F B "set_ticks" 2 703 "void(int32 value)" `623 
F N "set_ticks" 2 704 ""
V L "stream" 2 704 "int8" `626 
V L "value" 2 704 "int8" `627 
F B "set_ticks" 2 704 "void(int8 stream,int8 value)" `625 
F N "set_ticks" 2 705 ""
V L "stream" 2 705 "int8" `629 
V L "value" 2 705 "int16" `630 
F B "set_ticks" 2 705 "void(int8 stream,int16 value)" `628 
F N "set_ticks" 2 706 ""
V L "stream" 2 706 "int8" `632 
V L "value" 2 706 "int32" `633 
F B "set_ticks" 2 706 "void(int8 stream,int32 value)" `631  "#use pwm() Prototypes:"
F N "pwm_on" 2 709 ""
F B "pwm_on" 2 709 "void()" `634 
F N "pwm_on" 2 710 ""
V L "stream" 2 710 "int8" `636 
F B "pwm_on" 2 710 "void(int8 stream)" `635 
F N "pwm_off" 2 711 ""
F B "pwm_off" 2 711 "void()" `637 
F N "pwm_off" 2 712 ""
V L "stream" 2 712 "int8" `639 
F B "pwm_off" 2 712 "void(int8 stream)" `638 
F N "pwm_set_duty" 2 713 ""
V L "duty" 2 713 "int16" `641 
F B "pwm_set_duty" 2 713 "void(int16 duty)" `640 
F N "pwm_set_duty" 2 714 ""
V L "stream" 2 714 "int8" `643 
V L "duty" 2 714 "int16" `644 
F B "pwm_set_duty" 2 714 "void(int8 stream,int16 duty)" `642 
F N "pwm_set_duty_percent" 2 715 ""
V L "percent" 2 715 "int16" `646 
F B "pwm_set_duty_percent" 2 715 "void(int16 percent)" `645 
F N "pwm_set_duty_percent" 2 716 ""
V L "stream" 2 716 "int8" `648 
V L "percent" 2 716 "int16" `649 
F B "pwm_set_duty_percent" 2 716 "void(int8 stream,int16 percent)" `647 
F N "pwm_set_frequency" 2 717 ""
V L "frequency" 2 717 "int32" `651 
F B "pwm_set_frequency" 2 717 "void(int32 frequency)" `650 
F N "pwm_set_frequency" 2 718 ""
V L "stream" 2 718 "int8" `653 
V L "frequency" 2 718 "int32" `654 
F B "pwm_set_frequency" 2 718 "void(int8 stream,int32 frequency)" `652 
F N "pwm_get_duty_period" 2 719 ""
F B "pwm_get_duty_period" 2 719 "int16()" `655 
F N "pwm_get_duty_period" 2 720 ""
V L "stream" 2 720 "int8" `657 
F B "pwm_get_duty_period" 2 720 "int16(int8 stream)" `656  "#use capture() Prototypes:"
F N "get_capture_time" 2 723 ""
F B "get_capture_time" 2 723 "int16()" `658 
F N "get_capture_time" 2 724 ""
V L "stream" 2 724 "int8" `660 
F B "get_capture_time" 2 724 "int16(int8 stream)" `659 
F N "get_capture_event" 2 725 ""
F B "get_capture_event" 2 725 "int8()" `661 
F N "get_capture_event" 2 726 ""
V L "stream" 2 726 "int8" `663 
F B "get_capture_event" 2 726 "int8(int8 stream)" `662  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
F N "goto_address" 2 739 ""
V L "address" 2 739 "int16" `665 
F B "goto_address" 2 739 "void(int16 address)" `664 
F N "label_address" 2 740 ""
V L "label" 2 740 "int16" `667 
F B "label_address" 2 740 "int16(int16 label)" `666  "Program Memory Read Prototypes:"
F N "read_program_memory" 2 743 ""
V L "address" 2 743 "int16" `669 
V L "DataPtr" 2 743 "*int8" `670 
V L "count" 2 743 "int16" `671 
F B "read_program_memory" 2 743 "void(int16 address,*int8 DataPtr,int16 count)" `668 
F N "read_program_eeprom" 2 744 ""
V L "address" 2 744 "int16" `673 
F B "read_program_eeprom" 2 744 "int16(int16 address)" `672  "Program Memory Write Prototypes:"
F N "erase_program_eeprom" 2 747 ""
V L "address" 2 747 "int16" `675 
F B "erase_program_eeprom" 2 747 "void(int16 address)" `674 
F N "write_program_memory" 2 748 ""
V L "address" 2 748 "int16" `677 
V L "DataPtr" 2 748 "*int8" `678 
V L "count" 2 748 "int16" `679 
F B "write_program_memory" 2 748 "void(int16 address,*int8 DataPtr,int16 count)" `676 
F N "write_program_eeprom" 2 749 ""
V L "address" 2 749 "int16" `681 
V L "data" 2 749 "int16" `682 
F B "write_program_eeprom" 2 749 "void(int16 address,int16 data)" `680  "EEPROM Prototypes:"
D G "__EEADDRESS__" 2 756 "unsigned int8"
F N "read_eeprom" 2 759 ""
V L "address" 2 759 "int8" `684 
F B "read_eeprom" 2 759 "int8(int8 address)" `683 
F N "write_eeprom" 2 760 ""
V L "address" 2 760 "int8" `686 
V L "value" 2 760 "int8" `687 
F B "write_eeprom" 2 760 "void(int8 address,int8 value)" `685  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
F N "enable_interrupts" 2 767 ""
V L "interrupt" 2 767 "int32" `689 
F B "enable_interrupts" 2 767 "void(int32 interrupt)" `688 
F N "disable_interrupts" 2 768 ""
V L "interrupt" 2 768 "int32" `691 
F B "disable_interrupts" 2 768 "void(int32 interrupt)" `690 
F N "clear_interrupt" 2 769 ""
V L "interrupt" 2 769 "int32" `693 
F B "clear_interrupt" 2 769 "void(int32 interrupt)" `692 
F N "interrupt_active" 2 770 ""
V L "interrupt" 2 770 "int32" `695 
F B "interrupt_active" 2 770 "int8(int32 interrupt)" `694 
F N "interrupt_enabled" 2 771 ""
V L "interrupt" 2 771 "int32" `697 
F B "interrupt_enabled" 2 771 "int8(int32 interrupt)" `696 
F N "ext_int_edge" 2 772 ""
V L "source" 2 772 "int8" `699 
V L "edge" 2 772 "int8" `700 
F B "ext_int_edge" 2 772 "void(int8 source,int8 edge)" `698 
F N "jump_to_isr" 2 773 ""
V L "address" 2 773 "int16" `702 
F B "jump_to_isr" 2 773 "void(int16 address)" `701  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 775 "0x40"
D G "H_TO_L" 2 776 "0"
D G "GLOBAL" 2 778 "0x0BC0"
D G "PERIPH" 2 779 "0x0B40"
D G "INT_RTCC" 2 780 "0x000B20"
D G "INT_RB" 2 781 "0x01FF0B08"
D G "INT_EXT_L2H" 2 782 "0x50000B10"
D G "INT_EXT_H2L" 2 783 "0x60000B10"
D G "INT_EXT" 2 784 "0x000B10"
D G "INT_AD" 2 785 "0x008C40"
D G "INT_TBE" 2 786 "0x008C10"
D G "INT_RDA" 2 787 "0x008C20"
D G "INT_TIMER1" 2 788 "0x008C01"
D G "INT_TIMER2" 2 789 "0x008C02"
D G "INT_CCP1" 2 790 "0x008C04"
D G "INT_CCP2" 2 791 "0x008D01"
D G "INT_SSP" 2 792 "0x008C08"
D G "INT_BUSCOL" 2 793 "0x008D08"
D G "INT_EEPROM" 2 794 "0x008D10"
D G "INT_TIMER0" 2 795 "0x000B20"
D G "INT_OSC_FAIL" 2 796 "0x008D80"
D G "INT_COMP" 2 797 "0x008D20"
D G "INT_COMP2" 2 798 "0x008D40"
D G "INT_ULPWU" 2 799 "0x008D04"
D G "INT_RB0" 2 800 "0x1010B08"
D G "INT_RB1" 2 801 "0x1020B08"
D G "INT_RB2" 2 802 "0x1040B08"
D G "INT_RB3" 2 803 "0x1080B08"
D G "INT_RB4" 2 804 "0x1100B08"
D G "INT_RB5" 2 805 "0x1200B08"
D G "INT_RB6" 2 806 "0x1400B08"
D G "INT_RB7" 2 807 "0x1800B08"
C L "jump_to_isr" 0 3 1 "FUNCTION"
D G "LCD_BACKLIGHT" 3 6 "0x08"
D G "LCD_NOBACKLIGHT" 3 7 "0x00"
D G "LCD_FIRST_ROW" 3 8 "0x80"
D G "LCD_SECOND_ROW" 3 9 "0xC0"
D G "LCD_THIRD_ROW" 3 10 "0x94"
D G "LCD_FOURTH_ROW" 3 11 "0xD4"
D G "LCD_CLEAR" 3 12 "0x01"
D G "LCD_RETURN_HOME" 3 13 "0x02"
D G "LCD_ENTRY_MODE_SET" 3 14 "0x04"
D G "LCD_CURSOR_OFF" 3 15 "0x0C"
D G "LCD_UNDERLINE_ON" 3 16 "0x0E"
D G "LCD_BLINK_CURSOR_ON" 3 17 "0x0F"
D G "LCD_MOVE_CURSOR_LEFT" 3 18 "0x10"
D G "LCD_MOVE_CURSOR_RIGHT" 3 19 "0x14"
D G "LCD_TURN_ON" 3 20 "0x0C"
D G "LCD_TURN_OFF" 3 21 "0x08"
D G "LCD_SHIFT_LEFT" 3 22 "0x18"
D G "LCD_SHIFT_RIGHT" 3 23 "0x1E"
D G "LCD_TYPE" 3 26 "2" "0=5x7, 1=5x10, 2=2 lines"
V G "RS" 3 30 "int1" `713 
V G "i2c_addr" 3 31 "int8" `714 
V G "backlight_val" 3 31 "int8" `715 
F N "LCD_Write_Nibble" 3 33 ""
V L "n" 3 33 "int8" `717 
f G "LCD_Write_Nibble" 3 33 "void(int8 n)" `716 
F N "LCD_Cmd" 3 34 ""
V L "Command" 3 34 "int8" `719 
f G "LCD_Cmd" 3 34 "void(int8 Command)" `718 
F N "LCD_Goto" 3 35 ""
V L "col" 3 35 "int8" `721 
V L "row" 3 35 "int8" `722 
f G "LCD_Goto" 3 35 "void(int8 col,int8 row)" `720 
F N "LCD_Out" 3 36 ""
V L "LCD_Char" 3 36 "int8" `724 
f G "LCD_Out" 3 36 "void(int8 LCD_Char)" `723 
F N "LCD_Begin" 3 37 ""
V L "_i2c_addr" 3 37 "int8" `726 
f G "LCD_Begin" 3 37 "void(int8 _i2c_addr)" `725 
F N "Backlight" 3 38 ""
f G "Backlight" 3 38 "void()" `727 
F N "noBacklight" 3 39 ""
f G "noBacklight" 3 39 "void()" `728 
F N "Expander_Write" 3 40 ""
V L "value" 3 40 "int8" `730 
f G "Expander_Write" 3 40 "void(int8 value)" `729 
F N "LCD_Write_Nibble" 3 44 ""
V L "n" 3 44 "int8" `732 
F G "LCD_Write_Nibble" 3 44 "void(int8 n)" `716 
F N "LCD_Cmd" 3 53 ""
V L "Command" 3 53 "int8" `732 
F G "LCD_Cmd" 3 53 "void(int8 Command)" `718 
F N "LCD_Goto" 3 59 ""
V L "row" 3 59 "int8" `721 
V L "col" 3 59 "int8" `733 
F G "LCD_Goto" 3 59 "void(int8 row,int8 col)" `720 
C L "LCD_Goto" 3 1 1 "FUNCTION"
F N "LCD_Out" 3 75 ""
V L "LCD_Char" 3 75 "int8" `732 
F G "LCD_Out" 3 75 "void(int8 LCD_Char)" `723 
F N "LCD_Begin" 3 81 ""
V L "_i2c_addr" 3 81 "int8" `732 
F G "LCD_Begin" 3 81 "void(int8 _i2c_addr)" `725 
F N "Backlight" 3 103 ""
F G "Backlight" 3 103 "void()" `727 
F N "noBacklight" 3 108 ""
F G "noBacklight" 3 108 "void()" `728 
F N "Expander_Write" 3 113 ""
V L "value" 3 113 "int8" `732 
F G "Expander_Write" 3 113 "void(int8 value)" `729 
F N "lcd_putc" 3 120 ""
V L "c" 3 120 "int8" `732 
F G "lcd_putc" 3 120 "void(int8 c,int8 col)" `731 
D G "_STDIO" 4 12 ""
D G "_STRING" 5 12 ""
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 22 "unsigned int8"
D G "wchar_t" 6 26 "unsigned char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `743 
V L "s2" 5 34 "*void" `744 
V L "n" 5 34 "int8" `745 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int8 n)" `742 
V L "sc1" 5 36 "*int8" `746 
V L "sc2" 5 37 "*int8" `747 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `749 
V L "s2" 5 61 "*int8" `750 
V L "n" 5 61 "int8" `751 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int8 n)" `748 
V L "s" 5 63 "*int8" `752 
C L "strcat" 5 19 3 "FUNCTION"
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `754 
V L "s2" 5 78 "*int8" `755 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `753 
V L "s" 5 80 "*int8" `756 
C L "strncat" 5 19 2 "FUNCTION"
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `758 
V L "s2" 5 96 "*int8" `759 
V L "n" 5 96 "int8" `760 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int8 n)" `757 
V L "s" 5 98 "*int8" `761 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `763 
V L "s2" 5 120 "*void" `764 
V L "n" 5 120 "int8" `765 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int8 n)" `762 
V L "su1" 5 122 "*int8" `766 
V L "su2" 5 122 "*int8" `767 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `769 
V L "s2" 5 134 "*int8" `770 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `768 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `772 
V L "s2" 5 144 "*int8" `773 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `771 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `775 
V L "s2" 5 157 "*int8" `776 
V L "n" 5 157 "int8" `777 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int8 n)" `774 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `779 
V L "s2" 5 170 "*int8" `780 
V L "n" 5 170 "int8" `781 
F G "strxfrm" 5 171 "int8(*int8 s1,*int8 s2,int8 n)" `778 
V L "c" 5 172 "int8" `782 
V L "n1" 5 173 "int8" `783 
C L "strxfrm" 5 19 1 "FUNCTION"
C L "memchr" 5 19 3 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `785 
V L "c" 5 201 "int8" `786 
V L "n" 5 201 "int8" `787 
F G "memchr" 5 202 "*int8(*void s,int8 c,int8 n)" `784 
V L "uc" 5 203 "int8" `788 
V L "su" 5 204 "*int8" `789 
C L "strchr" 5 19 2 "FUNCTION"
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `791 
V L "c" 5 215 "int8" `792 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `790 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `794 
V L "s2" 5 227 "*int8" `795 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `793 
V L "sc1" 5 229 "*int8" `796 
V L "sc2" 5 229 "*int8" `797 
C L "strpbrk" 5 19 4 "FUNCTION"
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `799 
V L "s2" 5 242 "*int8" `800 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `798 
V L "sc1" 5 244 "*int8" `801 
V L "sc2" 5 244 "*int8" `802 
C L "strrchr" 5 19 2 "FUNCTION"
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `804 
V L "c" 5 257 "int8" `805 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `803 
V L "p" 5 259 "*int8" `806 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `808 
V L "s2" 5 272 "*int8" `809 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `807 
V L "sc1" 5 274 "*int8" `810 
V L "sc2" 5 274 "*int8" `811 
C L "strstr" 5 19 6 "FUNCTION"
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `813 
V L "s2" 5 291 "*int8" `814 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `812 
V L "s" 5 293 "*int8" `815 
V L "t" 5 293 "*int8" `816 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `818 
F G "strlen" 5 319 "int8(*int8 s)" `817 
V L "sc" 5 320 "*int8" `819 
C L "strtok" 5 19 13 "FUNCTION"
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `821 
V L "s2" 5 341 "*int8" `822 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `820 
V L "beg" 5 343 "*int8" `823 
V L "end" 5 343 "*int8" `824 
V L "save" 5 344 "*int8" `825 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `827 
V L "s2" 5 392 "*int8" `828 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `826 
C L "strlwr" 5 19 3 "FUNCTION"
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `832 
F G "strlwr" 5 407 "*int8(*int8 s)" `831 
V L "p" 5 408 "*int8" `833 
C L "strupr" 5 19 3 "FUNCTION"
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `835 
F G "strupr" 5 421 "*int8(*int8 s)" `834 
V L "p" 5 422 "*int8" `836 
D G "_STDLIB" 8 13 ""
D G "RAND_MAX" 8 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 8 26 "1"
T G "div_t" 8 34 "{sint8 quot,sint8 rem}" `840 
T G "ldiv_t" 8 39 "{sint16 quot,sint16 rem}" `844  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 6 3 6 "FUNCTION"
C L "atoi" 8 44 2 "FUNCTION"
C L "atoi" 8 47 1 "*"
C L "atoi" 8 47 1 "*"
F N "atoi" 8 51 ""
V L "s" 8 51 "*int8" `846 
f G "atoi" 8 51 "sint8(*int8 s)" `845  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 8 59 ""
V L "s" 8 59 "*int8" `848 
f G "atoi32" 8 59 "sint32(*int8 s)" `847  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 8 47 2 "FUNCTION"
F N "itoa" 8 80 ""
V L "num" 8 80 "sint32" `850 
V L "base" 8 80 "int8" `851 
V L "s" 8 80 "*int8" `852 
f G "itoa" 8 80 "*int8(sint32 num,int8 base,*int8 s)" `849  "Standard template: signed int16  atol(char * s)"
C L "itoa" 8 82 1 "*"
C L "itoa" 8 82 1 "*"
F N "atol" 8 86 ""
V L "s" 8 86 "*int8" `854 
f G "atol" 8 86 "sint16(*int8 s)" `853  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 8 88 1 "*"
C L "atol" 8 88 1 "*"
C L "atol" 8 88 1 "*"
C L "atol" 8 88 1 "*"
F N "strtol" 8 94 ""
V L "s" 8 94 "*int8" `856 
V L "endptr" 8 94 "*int8" `857 
V L "base" 8 94 "sint8" `858 
f G "strtol" 8 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `855  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 8 96 1 "*"
C L "strtol" 8 96 1 "*"
C L "strtol" 8 96 1 "*"
C L "strtol" 8 96 1 "*"
F N "strtoul" 8 102 ""
V L "s" 8 102 "*int8" `860 
V L "endptr" 8 102 "*int8" `861 
V L "base" 8 102 "sint8" `862 
f G "strtoul" 8 102 "int16(*int8 s,*int8 endptr,sint8 base)" `859  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 8 96 2 "FUNCTION"
C L "strtoul" 8 104 1 "*"
C L "strtoul" 8 104 1 "*"
C L "strtoul" 8 104 1 "*"
F N "strtof" 8 111 ""
V L "s" 8 111 "*int8" `864 
V L "endptr" 8 111 "??0 *" `865 
f G "strtof" 8 111 "float(*int8 s,??0 * endptr)" `863  "provided for compatibility"
D G "strtof48" 8 117 "(s,e) strtof(s, e)"
D G "strtod" 8 118 "(s,e) strtof(s, e)"
C L "strtof" 8 104 1 "FUNCTION"
C L "strtof" 8 121 1 "*"
D G "atof" 8 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 8 121 1 "FUNCTION"
C L "strtof" 8 144 1 "*"
C L "strtof" 8 144 1 "*"
C L "strtof" 8 144 1 "*"
F N "atoe" 8 150 ""
V L "s" 8 150 "*int8" `868 
f G "atoe" 8 150 "float(*int8 s)" `867  "Pseudo-random sequence generation functions"
C L "atoe" 8 144 1 "FUNCTION"
C L "atoe" 8 161 1 "*"
C L "atoe" 8 161 1 "*"
C L "atoe" 8 161 1 "*"
C L "atoe" 8 161 1 "*"
C L "atoe" 8 161 1 "*"
F N "rand" 8 170 ""
f G "rand" 8 170 "int16()" `869  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
C L "rand" 8 172 1 "*"
F N "srand" 8 192 ""
V L "seed" 8 192 "int32" `871 
f G "srand" 8 192 "void(int32 seed)" `870  "Memory management functions"
C L "srand" 8 172 3 "FUNCTION"
F N "system" 8 206 ""
V L "string" 8 206 "*int8" `873 
f G "system" 8 206 "sint8(*int8 string)" `872  "Searching and sorting utilities"
C L "system" 8 172 1 "FUNCTION"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 1 "*"
C L "system" 8 212 4 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
C L "system" 8 230 1 "*"
D G "labs" 8 250 "abs"
F N "div" 8 252 ""
V L "numer" 8 252 "sint8" `875 
V L "denom" 8 252 "sint8" `876 
f G "div" 8 252 "div_t(sint8 numer,sint8 denom)" `874 
F N "ldiv" 8 253 ""
V L "numer" 8 253 "sint16" `878 
V L "denom" 8 253 "sint16" `879 
f G "ldiv" 8 253 "ldiv_t(sint16 numer,sint16 denom)" `877  "Multibyte character functions"
C L "ldiv" 8 230 4 "FUNCTION"
C L "ldiv" 6 2 7 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
F N "div" 8 275 ""
V L "numer" 8 275 "sint8" `875 
V L "denom" 8 275 "sint8" `882 
F G "div" 8 276 "div_t(sint8 numer,sint8 denom)" `874 
V L "val" 8 277 "div_t" `880 
F N "ldiv" 8 283 ""
V L "numer" 8 283 "sint16" `878 
V L "denom" 8 283 "sint16" `889 
F G "ldiv" 8 284 "ldiv_t(sint16 numer,sint16 denom)" `877 
V L "val" 8 285 "ldiv_t" `887 
F N "atoe" 8 362 ""
V L "s" 8 362 "*int8" `895 
F G "atoe" 8 363 "float(*int8 s)" `867 
V L "pow10" 8 364 "float" `894 
V L "result" 8 365 "float" `895 
V L "sign" 8 366 "int8" `896 
V L "expsign" 8 367 "int8" `897 
V L "c" 8 368 "int8" `898 
V L "ptr" 8 369 "int8" `899 
V L "i" 8 370 "int8" `900 
V L "exp" 8 371 "float" `901 
V L "expcnt" 8 372 "int8" `902 
C L "atoe" 8 398 1 "FUNCTION"
F N "atoi" 8 430 ""
V L "s" 8 430 "*int8" `915 
F G "atoi" 8 431 "sint8(*int8 s)" `845 
V L "result" 8 432 "sint8" `914 
V L "sign" 8 433 "int8" `915 
V L "base" 8 433 "int8" `916 
V L "index" 8 433 "int8" `917 
V L "c" 8 434 "int8" `918 
C L "atoi" 8 398 1 "FUNCTION"
C L "atoi" 8 398 1 "FUNCTION"
C L "atoi" 8 398 1 "FUNCTION"
C L "atoi" 8 398 1 "FUNCTION"
C L "atoi" 8 398 1 "FUNCTION"
C L "atoi" 8 398 1 "FUNCTION"
F N "atol" 8 499 ""
V L "s" 8 499 "*int8" `920 
F G "atol" 8 500 "sint16(*int8 s)" `853 
V L "result" 8 501 "sint16" `919 
V L "sign" 8 502 "int8" `920 
V L "base" 8 502 "int8" `921 
V L "index" 8 502 "int8" `922 
V L "c" 8 503 "int8" `923 
C L "atol" 8 398 1 "FUNCTION"
C L "atol" 8 398 1 "FUNCTION"
C L "atol" 8 398 1 "FUNCTION"
C L "atol" 8 398 1 "FUNCTION"
C L "mult_with10" 8 398 1 "FUNCTION"
F N "mult_with10" 8 566 ""
V L "num" 8 566 "int32" `925 
F G "mult_with10" 8 567 "sint32(int32 num)" `924 
F N "atoi32" 8 572 ""
V L "s" 8 572 "*int8" `927 
F G "atoi32" 8 573 "sint32(*int8 s)" `847 
V L "result" 8 574 "sint32" `926 
V L "sign" 8 575 "int8" `927 
V L "base" 8 575 "int8" `928 
V L "index" 8 575 "int8" `929 
V L "c" 8 576 "int8" `930 
C L "atoi32" 8 398 1 "FUNCTION"
C L "atoi32" 8 398 1 "FUNCTION"
C L "atoi32" 8 398 1 "FUNCTION"
C L "atoi32" 8 398 1 "FUNCTION"
C L "atoi32" 8 398 1 "FUNCTION"
F N "itoa" 8 771 ""
V L "num" 8 771 "sint32" `850 
V L "base" 8 771 "int8" `851 
V L "s" 8 771 "*int8" `934 
F G "itoa" 8 772 "*int8(sint32 num,int8 base,*int8 s)" `849 
V L "temp" 8 773 "int32" `931 
V L "i" 8 774 "int8" `932 
V L "sign" 8 774 "int8" `933 
V L "cnt" 8 774 "int8" `934 
V L "c" 8 775 "int8" `935 
C L "itoa" 8 398 1 "FUNCTION"
C L "itoa" 8 398 1 "FUNCTION"
C L "itoa" 8 398 1 "FUNCTION"
C L "itoa" 8 398 1 "FUNCTION"
C L "itoa" 8 398 1 "FUNCTION"
F N "strtof" 8 886 ""
V L "s" 8 886 "*int8" `864 
V L "endptr" 8 886 "??0 *" `944 
F G "strtof" 8 887 "float(*int8 s,??0 * endptr)" `863 
V L "pow10" 8 888 "float" `942 
V L "result" 8 889 "float" `943 
V L "skip" 8 890 "int1" `944 
V L "sign" 8 890 "int1" `945 
V L "point" 8 890 "int1" `946 
V L "c" 8 891 "int8" `947 
V L "ptr" 8 892 "int8" `948 
F N "strtoul" 8 1105 ""
V L "s" 8 1105 "*int8" `860 
V L "endptr" 8 1105 "*int8" `861 
V L "base" 8 1105 "sint8" `953 
F G "strtoul" 8 1106 "int16(*int8 s,*int8 endptr,sint8 base)" `859 
V L "sc" 8 1107 "*int8" `950 
V L "s1" 8 1107 "*int8" `951 
V L "sd" 8 1107 "*int8" `952 
V L "x" 8 1108 "int16" `953 
V L "sign" 8 1109 "int8" `954 
V L "digits" 8 1110 "int8[1]" `955 
C L "strtoul" 8 398 1 "FUNCTION"
C L "strtoul" 8 398 1 "FUNCTION"
C L "strtoul" 8 398 1 "FUNCTION"
F N "strtol" 8 1167 ""
V L "s" 8 1167 "*int8" `856 
V L "endptr" 8 1167 "*int8" `857 
V L "base" 8 1167 "sint8" `960 
F G "strtol" 8 1168 "sint16(*int8 s,*int8 endptr,sint8 base)" `855 
V L "sc" 8 1169 "*int8" `957 
V L "s1" 8 1169 "*int8" `958 
V L "sd" 8 1169 "*int8" `959 
V L "x" 8 1170 "sint16" `960 
V L "sign" 8 1171 "int8" `961 
V L "digits" 8 1172 "int8[1]" `962 
C L "strtol" 8 398 1 "FUNCTION"
C L "strtol" 8 398 1 "FUNCTION"
C L "strtol" 8 398 1 "FUNCTION"
F N "system" 8 1231 ""
V L "string" 8 1231 "*int8" `965 
F G "system" 8 1232 "sint8(*int8 string)" `872 
F N "mblen" 8 1236 ""
V L "s" 8 1236 "*int8" `965 
V L "n" 8 1236 "int8" `966 
F G "mblen" 8 1237 "int8(*int8 s,int8 n)" `964 
F N "mbtowc" 8 1241 ""
V L "pwc" 8 1241 "*int8" `968 
V L "s" 8 1241 "*int8" `969 
V L "n" 8 1241 "int8" `970 
F G "mbtowc" 8 1242 "int8(*int8 pwc,*int8 s,int8 n)" `967 
F N "wctomb" 8 1247 ""
V L "s" 8 1247 "*int8" `972 
V L "wchar" 8 1247 "int8" `973 
F G "wctomb" 8 1248 "int8(*int8 s,int8 wchar)" `971 
F N "mbstowcs" 8 1253 ""
V L "pwcs" 8 1253 "*int8" `975 
V L "s" 8 1253 "*int8" `976 
V L "n" 8 1253 "int8" `977 
F G "mbstowcs" 8 1254 "int8(*int8 pwcs,*int8 s,int8 n)" `974 
F N "wcstombs" 8 1259 ""
V L "s" 8 1259 "*int8" `979 
V L "pwcs" 8 1259 "*int8" `980 
V L "n" 8 1259 "int8" `981 
F G "wcstombs" 8 1260 "int8(*int8 s,*int8 pwcs,int8 n)" `978 
V G "_Randseed" 8 1269 "int32" `982 
F N "rand" 8 1271 ""
F G "rand" 8 1272 "int16()" `869 
F N "srand" 8 1277 ""
V L "seed" 8 1277 "int32" `987 
F G "srand" 8 1278 "void(int32 seed)" `870 
F N "*_Cmpfun" 8 1287 ""
V L "p1" 8 1287 "*int8" `987 
V L "p2" 8 1287 "*int8" `988 
T G "*_Cmpfun" 8 1287 "sint8(*int8 p1,*int8 p2)" `986 
F N "qsort" 8 1294 ""
V L "qdata" 8 1294 "*int8" `991 
V L "qitems" 8 1294 "int8" `992 
V L "qsize" 8 1294 "int8" `993 
V L "cmp" 8 1294 "_Cmpfun" `994 
F G "qsort" 8 1294 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `990 
V L "m" 8 1295 "int8" `995 
V L "j" 8 1295 "int8" `996 
V L "i" 8 1295 "int8" `997 
V L "l" 8 1295 "int8" `998 
V L "done" 8 1296 "int1" `999 
V L "t" 8 1297 "int8[16]" `1000 
F N "bsearch" 8 1322 ""
V L "key" 8 1322 "*int8" `1003 
V L "base" 8 1322 "*int8" `1004 
V L "num" 8 1322 "int8" `1005 
V L "width" 8 1322 "int8" `1006 
V L "cmp" 8 1322 "_Cmpfun" `1007 
F G "bsearch" 8 1323 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `1002 
V L "p" 8 1324 "*int8" `1008 
V L "q" 8 1324 "*int8" `1009 
V L "n" 8 1325 "int8" `1010 
V L "pivot" 8 1326 "int8" `1011 
V L "val" 8 1327 "sint8" `1012 
C L "bsearch" 8 398 1 "FUNCTION"
D G "DHT11_PIN" 9 1 "PIN_C0" "connection pin between DHT11 and mcu"
V G "Time_out" 9 2 "int1" `1013 
F N "start_signal" 9 4 ""
F G "start_signal" 9 4 "void()" `1014 
C L "start_signal" 9 5 1 "FUNCTION"
C L "start_signal" 9 5 1 "FUNCTION"
C L "start_signal" 9 5 1 "FUNCTION"
C L "start_signal" 9 5 1 "FUNCTION"
F N "check_response" 9 14 ""
F G "check_response" 9 14 "int8()" `1015 
C L "check_response" 9 5 1 "FUNCTION"
C L "check_response" 9 5 1 "FUNCTION"
F N "Read_Data" 9 24 ""
F G "Read_Data" 9 24 "int8()" `1016 
V L "i" 9 25 "int8" `1017 
V L "k" 9 25 "int8" `1018 
V L "_data" 9 25 "int8" `1019 
C L "Read_Data" 9 5 1 "FUNCTION"
C L "Read_Data" 9 5 1 "FUNCTION"
C L "Read_Data" 9 5 1 "FUNCTION"
C L "Read_Data" 9 5 1 "FUNCTION"
C L "Read_Data" 9 5 1 "FUNCTION"
D G "BH1750_address_w" 11 5 "0x46"
D G "BH1750_address_r" 11 6 "0x47"
D G "power_down" 11 8 "0x00"
D G "power_up" 11 9 "0x01"
D G "reset" 11 10 "0x07"
D G "cont_H_res_mode1" 11 11 "0x10"
D G "cont_H_res_mode2" 11 12 "0x11"
D G "cont_L_res_mode" 11 13 "0x13"
D G "one_time_H_res_mode1" 11 14 "0x20"
D G "one_time_H_res_mode2" 11 15 "0x21"
D G "one_time_L_res_mode" 11 16 "0x23"
F N "BH1750_init" 11 19 ""
f G "BH1750_init" 11 19 "void()" `1024 
F N "BH1750_write" 11 20 ""
V L "cmd" 11 20 "int8" `1026 
f G "BH1750_write" 11 20 "void(int8 cmd)" `1025 
F N "BH1750_read_word" 11 21 ""
f G "BH1750_read_word" 11 21 "int16()" `1027 
F N "get_lux_value" 11 22 ""
V L "mode" 11 22 "int8" `1029 
V L "delay_time" 11 22 "int16" `1030 
f G "get_lux_value" 11 22 "int16(int8 mode,int16 delay_time)" `1028 
F N "BH1750_init" 10 4 ""
F G "BH1750_init" 10 5 "void()" `1024 
F N "BH1750_write" 10 11 ""
V L "cmd" 10 11 "int8" `1032 
F G "BH1750_write" 10 12 "void(int8 cmd)" `1025 
F N "BH1750_read_word" 10 21 ""
F G "BH1750_read_word" 10 22 "int16()" `1027 
V L "value" 10 23 "int16" `1031 
V L "lb" 10 24 "int8" `1032 
V L "hb" 10 25 "int8" `1033 
F N "get_lux_value" 10 36 ""
V L "mode" 10 36 "int8" `1029 
V L "delay_time" 10 36 "int16" `1036 
F G "get_lux_value" 10 37 "int16(int8 mode,int16 delay_time)" `1028 
V L "lux_value" 10 38 "int16" `1034 
V G "t" 0 20 "int8" `1035 
V G "T_byte2" 0 20 "int8" `1036 
V G "h" 0 20 "int8" `1037 
V G "RH_byte2" 0 20 "int8" `1038 
V G "CheckSum" 0 20 "int8" `1039 
V G "adc_value" 0 21 "int16" `1040 
V G "w" 0 22 "int8" `1041 
V G "lux" 0 23 "int16" `1042 
V G "q" 0 25 "int1" `1043 
V G "d" 0 25 "int1" `1044 
V G "b" 0 25 "int1" `1045 
V G "p" 0 25 "int1" `1046 
D G "BACK" 0 28 "pin_b6"
D G "ONOFF" 0 29 "pin_b5"
D G "DW" 0 30 "pin_b4"
D G "RIGHT" 0 31 "pin_b3"
D G "GO" 0 32 "pin_b2"
D G "LEFT" 0 33 "pin_b1"
D G "UP" 0 34 "pin_b0"
D G "FAN" 0 37 "pin_a1"
D G "LED" 0 38 "pin_a2"
D G "BOMB" 0 39 "pin_a3"
D G "SPRAY" 0 40 "pin_a4"
V G "SSID" 0 45 "*int8" `1047 
V G "PASS" 0 46 "*int8" `1049 
V G "WEBSITE" 0 47 "*int8" `1051 
C L "ESP8266_init" 0 19 1 "FUNCTION"
F N "ESP8266_init" 0 50 ""
F G "ESP8266_init" 0 51 "void()" `1053 
C L "ESP8266_init" 0 19 1 "FUNCTION"
F N "ConnectWithWebServer" 0 58 ""
F G "ConnectWithWebServer" 0 58 "void()" `1066 
V L "length" 0 59 "int8" `1067 
V L "mang" 0 60 "int8[90]" `1068 
C L "ConnectWithWebServer" 0 19 1 "FUNCTION"
V G "button_state" 0 75 "int1" `1086 
V G "time" 0 76 "int8[1]" `1087 
V G "calendar" 0 77 "int8[1]" `1088 
V G "alarm1" 0 78 "int8[1]" `1089 
V G "alarm2" 0 79 "int8[1]" `1090 
V G "second" 0 80 "int8" `1091 
V G "second10" 0 80 "int8" `1092 
V G "minute" 0 80 "int8" `1093 
V G "minute10" 0 80 "int8" `1094 
V G "hour" 0 81 "int8" `1095 
V G "hour10" 0 81 "int8" `1096 
V G "date" 0 81 "int8" `1097 
V G "date10" 0 81 "int8" `1098 
V G "month" 0 81 "int8" `1099 
V G "month10" 0 81 "int8" `1100 
V G "year" 0 82 "int8" `1101 
V G "year10" 0 82 "int8" `1102 
V G "day" 0 82 "int8" `1103 
V G "alarm1_minute" 0 82 "int8" `1104 
V G "alarm1_hour" 0 82 "int8" `1105 
V G "alarm2_minute" 0 83 "int8" `1106 
V G "alarm2_hour" 0 83 "int8" `1107 
V G "i" 0 83 "int8" `1108 
V G "j" 0 83 "int8" `1109 
F N "ds1307_display" 0 84 ""
F G "ds1307_display" 0 84 "void()" `1110 
C L "ds1307_display" 0 19 1 "FUNCTION"
C L "ds1307_display" 0 19 1 "FUNCTION"
C L "ds1307_display" 0 19 1 "FUNCTION"
C L "ds1307_display" 0 19 1 "FUNCTION"
C L "ds1307_display" 0 19 1 "FUNCTION"
F N "alarm_display" 0 124 ""
F G "alarm_display" 0 124 "void()" `1121  "Display alarms info"
C L "alarm_display" 0 19 1 "FUNCTION"
C L "alarm_display" 0 19 1 "FUNCTION"
F N "ds1307_write" 0 143 ""
V L "address" 0 143 "int8" `1123 
V L "data_" 0 143 "int8" `1124 
F G "ds1307_write" 0 143 "void(int8 address,int8 data_)" `1122 
C L "ds1307_write" 0 19 1 "FUNCTION"
C L "ds1307_write" 0 19 1 "FUNCTION"
C L "ds1307_write" 0 19 1 "FUNCTION"
C L "ds1307_write" 0 19 1 "FUNCTION"
C L "ds1307_write" 0 19 1 "FUNCTION"
F N "ds1307_read" 0 152 ""
F G "ds1307_read" 0 152 "void()" `1125 
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
C L "ds1307_read" 0 19 1 "FUNCTION"
F N "alarm_check" 0 168 ""
F G "alarm_check" 0 168 "void()" `1126 
C L "alarm_check" 0 19 1 "FUNCTION"
C L "alarm_check" 0 19 1 "FUNCTION"
F N "edit" 0 178 ""
V L "parameter" 0 178 "int8" `1128 
V L "xx" 0 178 "int8" `1129 
V L "yy" 0 178 "int8" `1130 
F G "edit" 0 178 "int8(int8 parameter,int8 xx,int8 yy)" `1127 
V G "pos_x" 0 226 "int8" `1137 
V G "pos_y" 0 226 "int8" `1138 
V G "pos_go" 0 226 "int8" `1139 
V G "pos" 0 226 "int8" `1140 
V G "status" 0 227 "int1" `1141 
F N "xoa_LCD" 0 229 ""
F G "xoa_LCD" 0 230 "void()" `1142 
F N "xoa_pos_LCD" 0 234 ""
F G "xoa_pos_LCD" 0 235 "void()" `1143 
F N "phim_ONOFF" 0 262 ""
V L "status" 0 262 "int8" `1157 
F G "phim_ONOFF" 0 263 "int8(int8 status)" `1156 
V L "mode" 0 264 "int1" `1158 
F N "phim_LEFT" 0 281 ""
V L "pos_x" 0 281 "int8" `1160 
F G "phim_LEFT" 0 282 "int8(int8 pos_x)" `1159 
V L "pos_temp" 0 283 "int8" `1161 
F N "phim_RIGHT" 0 299 ""
V L "pos_x" 0 299 "int8" `1163 
F G "phim_RIGHT" 0 300 "int8(int8 pos_x)" `1162 
V L "pos_temp" 0 301 "int8" `1164 
F N "phim_UP" 0 317 ""
V L "pos_y" 0 317 "int8" `1166 
F G "phim_UP" 0 318 "int8(int8 pos_y)" `1165 
V L "pos_temp" 0 319 "int8" `1167 
F N "phim_DW" 0 335 ""
V L "pos_y" 0 335 "int8" `1169 
F G "phim_DW" 0 336 "int8(int8 pos_y)" `1168 
V L "pos_temp" 0 337 "int8" `1170 
F N "phim_GO" 0 354 ""
V L "pos_go" 0 354 "int8" `1172 
F G "phim_GO" 0 355 "int8(int8 pos_go)" `1171 
V L "pos_temp" 0 356 "int8" `1173 
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
C L "phim_GO" 0 19 1 "FUNCTION"
F N "phim_BACK" 0 397 ""
V L "pos_go" 0 397 "int8" `1175 
F G "phim_BACK" 0 398 "int8(int8 pos_go)" `1174 
V L "pos_temp" 0 399 "int8" `1176 
C L "phim_BACK" 0 19 1 "FUNCTION"
F N "pos_xy_current" 0 432 ""
V L "pos_x" 0 432 "int8" `1178 
V L "pos_y" 0 432 "int8" `1179 
V L "pos" 0 432 "int8" `1180 
F G "pos_xy_current" 0 433 "void(int8 pos_x,int8 pos_y,int8 pos)" `1177  "unsigned int8 col;"
F N "mode_ON" 0 517 ""
F G "mode_ON" 0 518 "void()" `1193 
F N "pos_relay_2" 0 526 ""
F G "pos_relay_2" 0 527 "void()" `1197 
F N "pos_auto_2" 0 542 ""
F G "pos_auto_2" 0 543 "void()" `1210 
F N "pos_tmr_2" 0 550 ""
F G "pos_tmr_2" 0 551 "void()" `1213 
C L "pos_tmr_2" 0 19 1 "FUNCTION"
C L "pos_tmr_2" 0 19 1 "FUNCTION"
C L "pos_tmr_2" 0 19 1 "FUNCTION"
C L "pos_tmr_2" 0 19 1 "FUNCTION"
F N "choice_mode" 0 559 ""
V L "pos_go" 0 559 "int8" `1215 
V L "pos_x" 0 559 "int8" `1216 
V L "pos" 0 559 "int8" `1217 
F G "choice_mode" 0 560 "int8(int8 pos_go,int8 pos_x,int8 pos)" `1214 
V L "mode" 0 561 "int8" `1218 
F N "pos_current" 0 581 ""
V L "mode" 0 581 "int8" `1220 
V L "pos_go" 0 581 "int8" `1221 
F G "pos_current" 0 582 "void(int8 mode,int8 pos_go)" `1219 
F N "mode_OFF" 0 624 ""
F G "mode_OFF" 0 625 "void()" `1222 
C L "mode_OFF" 0 19 1 "FUNCTION"
C L "mode_OFF" 0 19 1 "FUNCTION"
C L "mode_OFF" 0 19 1 "FUNCTION"
C L "mode_OFF" 0 19 1 "FUNCTION"
C L "mode_OFF" 0 19 1 "FUNCTION"
F N "MAIN" 0 655 ""
F G "MAIN" 0 655 "void()" `1238 
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 2 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 4 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
C L "MAIN" 0 19 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_write_slave" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_transfer" 3 6
F B "i2c_transfer_out" 3 4
F B "i2c_transfer_in" 3 4
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
